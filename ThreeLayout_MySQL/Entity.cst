<%@ CodeTemplate Language="C#" TargetLanguage="C#"  ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1.Source" Optional="True" Description="Table that the object is based on." %>

<%@ Property Name="Unchanged" Type="System.Boolean" Category="2.Common" Default="True" Description="选中,保留原始表名做为类名,否则截去表前缀作为类名" %>
<%@ Property Name="ProjectNameSpace" Type="String" Category="2.Common" Default="CIIC.XXX" Optional="False" Description="项目的命名空间,即Common包,Entity包的前缀" %>

<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System" %>
/**************************************************************
 * This file is part of  Project  
 * Copyright (C)<%= DateTime.Now.ToString("yyyy") %> Microsoft
 * 
 * Author      : Generated by CodeSmith(Entity_v3.cst)
 * Mail        : 
 * Create Date : <%= DateTime.Now.ToString() %>
 * Summary     : this file was auto generated by tool . do not modify
 * 
 * 
 * Modified By : 
 * Date        : 
 * Mail        :
 * Comment     :增加新属性Cloumn,Dispaly 需要和相应的DalBase对应
 * *************************************************************/

using System; 
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using <%=ProjectNameSpace %>.Common;

<%
string ClassName=GetClassName(SourceTable,Unchanged);//根据当前"表名"生成所映射的"实体类"名
ClassName += "Entity";
%>
namespace <%= ProjectNameSpace %>.Entity
{
	/// <summary>
	/// 表<%= SourceTable.Name%>数据实体
	/// </summary>
	[Serializable]
    [DataContract]
	[TableName("<%= SourceTable.Name %>")]
	public partial class <%= ClassName %> : EntityBase
	{ 
		
<% 
ColumnSchema primaryKeyColumn = SourceTable.PrimaryKey.MemberColumns[0];
bool isGuid = primaryKeyColumn.DataType == DbType.Guid;
%>		
		#region 构造函数
		///<summary>
		///<%=SourceTable.Description.Replace("\r\n","") %>
		///</summary>
		<% if (isGuid) {%>
		public <%= ClassName %>(): this(Guid.NewGuid())
		{
		}
        
		public <%= ClassName %>(Guid <%= GetCamelCaseName(primaryKeyColumn.Name) %>)
		{
			this.<%= primaryKeyColumn.Name %> = <%= GetCamelCaseName(primaryKeyColumn.Name) %>;
		}
		<% } else {%>
		public <%= ClassName%>():base()
		{
			
		}
		<% } %>

        public <%= ClassName %>(bool IsQueryTemplate) : base(IsQueryTemplate)
        {

        }
		 
		#endregion 
		
		#region 公共属性
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
		<%  string typeName = CSharpAlias[SourceTable.Columns[i].SystemType.FullName];
        if(SourceTable.Columns[i].AllowDBNull && !SourceTable.Columns[i].SystemType.IsClass)
        {
            typeName = typeName+"?";
        }
        %>        
        #region <%= SourceTable.Columns[i].Name %><%=SourceTable.Columns[i].Description.Replace("\r\n","") %>
        ///<summary>
        ///<%=SourceTable.Columns[i].Description.Replace("\r\n","") %>
        ///</summary>
        public const string FieldName_<%= SourceTable.Columns[i].Name %> = "<%= SourceTable.Columns[i].Name %>";
        private <%= typeName %> _<%= SourceTable.Columns[i].Name %>;
		///<summary>
		///<%=SourceTable.Columns[i].Description.Replace("\r\n","") %>
		///</summary>
        [DataMember]
        [Column(Name="<%= SourceTable.Columns[i].Name %>")]
        <% if(SourceTable.Columns[i].IsPrimaryKeyMember) {%>
        [PrimaryKey]<% if(this.IsIdentity(SourceTable.Columns[i])){ this.Response.Write("\n\t\t");this.Response.Write("[Identity]");} %>
        <% }else {%>
        <% string maxLength = GetStringMaxLength(SourceTable.Columns[i]);
        if(!string.IsNullOrEmpty(maxLength))this.Response.WriteLine("\t\t"+maxLength);
        }%>
        public <%= typeName %> <%= StringUtil.ToPascalCase(SourceTable.Columns[i].Name) %>
		{
			get{return _<%= SourceTable.Columns[i].Name %>;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_<%= SourceTable.Columns[i].Name %>, value);
                }
                
                _<%= SourceTable.Columns[i].Name %> = value;
            }   
		}
        
	    #endregion
		<% if (i < SourceTable.Columns.Count - 1) Response.Write("\r\n"); %>	
		<%}%>        
		#endregion
	}
}

<script runat="template">

public string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}

public string GetClassName(TableSchema table, Boolean unchanged)
{
   if(table==null)
   {
	  return null;
   }
   if(unchanged)
   {
     return table.Name;
   }
   else
   {
     if(table.Name.IndexOf("_") != -1)
     {
        return StringUtil.ToPascalCase(table.Name.Substring(table.Name.IndexOf("_")));
     }
     return StringUtil.ToPascalCase(table.Name);
   }
}
/// <summary>设置生成文件名, 同时也对应代码输出窗口Title上的文件名
/// </summary>
/// <returns></returns>
public override string GetFileName()
{
	return this.GetClassName(this.SourceTable, this.Unchanged) + "Entity.cs";
}
 


//取varchar,nvarchar, 这些字符型字段的长度
public string GetStringMaxLength(ColumnSchema column)
{
    string param = column.NativeType.ToUpper();
    string  result = "";
	if ( param.ToLower() != "timestamp" && param.ToLower() != "sql_variant" )
	{
		switch (column.DataType)
		{
			case DbType.Decimal:
            case DbType.Binary:
            case DbType.Int16:
            case DbType.Int32:
            case DbType.Int64:    
			{
				break;
			}
			case DbType.AnsiString:
			case DbType.AnsiStringFixedLength:
			{
				if (column.NativeType.ToLower() != "text" && column.NativeType.ToLower() != "ntext")
				{
					if (column.Size > 0)
					{
						result = string.Format("[MaxLength({0})]",column.Size);
					}
	   
				}
				break;
			}
			case DbType.String:
			case DbType.StringFixedLength:
			{
				if (column.NativeType.ToLower() != "text" && column.NativeType.ToLower() != "ntext")
				{
					if (column.Size > 0)
					{
						result = string.Format("[MaxLength({0})]",column.Size);
					}
		   
				}               
				break;
			}        
		}
	}
    //System.Diagnostics.Trace.WriteLine( string.Format("Name: {0} NativeType: {1} DataType: {2}", column.Name, column.NativeType, column.DataType) );
    return result;
}

public bool IsIdentity(ColumnSchema col)
{
    if (col.ExtendedProperties.Contains(TableColumnsEXProps.CS_IsIdentity) && bool.Parse( SafeExtendedProperty(col.ExtendedProperties[TableColumnsEXProps.CS_IsIdentity]) ) )
    {
        return true;
    }
    else
    {
        return false;
    }
}

public struct TableColumnsEXProps
{
    public const string  CS_IsRowGuidCol = "CS_IsRowGuidCol";
    public const string  CS_IsIdentity = "CS_IsIdentity";
    public const string  CS_IsComputed = "CS_IsComputed";
    public const string  CS_IsDeterministic = "CS_IsDeterministic";
    public const string  CS_IdentitySeed = "CS_IdentitySeed";
    public const string  CS_IdentityIncrement = "CS_IdentityIncrement";
    public const string  CS_Default = "CS_Default";
    public const string  CS_ComputedDefinition = "CS_ComputedDefinition";
    public const string  CS_Collation = "CS_Collation";
    public const string  CS_ConstraintName = "CS_Constraint1Name";
    public const string  CS_ConstraintDef = "CS_Constraint1Definition";
    public const string  CS_ConstraintType = "CS_Constraint1Type";
}

public string SafeExtendedProperty( SchemaExplorer.ExtendedProperty prop )
{
    if ( null != prop )
        return prop.Value.ToString();
    else
        return "";
}
</script>
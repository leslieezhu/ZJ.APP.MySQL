<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="1.Source" Optional="True" Description="Table that the object is based on." %>

<%@ Property Name="Unchanged" Type="System.Boolean" Category="2.Common" Default="True" Description="勾选表示生成的类名同表名,否则截取表前缀作为类名" %>
<%@ Property Name="ProjectNameSpace" Type="String" Category="2.Common" Default="CIIC.XXX" Optional="False" Description="项目的命名空间,即Common包,Entity包,DAL包的前缀" %>

<%@ Map Name="SqlNativeDbType" Src="SqlNativeType-DbType" Description="SqlNativeType to DbType Map" %>
<%@ Map Name="CSharpAlias" Src="System-CSharpAlias" Description="System to C# Type Map" %>
<%@ Map Name="DbTypeDataReaderMethod" Src="DbType-DataReaderMethod" Description="DbType-DataReaderMethod" %>

<%@ Assembly Name="SchemaExplorer"%>
<%@ Assembly Name="System.Data"%>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Data"%>
<%@ Import Namespace="System.Text"%>
/**************************************************************
 * This file is part of SMP Project
 * Copyright (C)<%= DateTime.Now.ToString("yyyy") %> Microsoft
 * 
 * Author      : Generated by CodeSmith(DAL_v3.cst)
 * Mail        : 
 * Create Date : <%= DateTime.Now.ToString() %>
 * Summary     : this file was auto generated by tool . do not modify
 * 
 * 
 * Modified By : 
 * Date        : 
 * Mail        : 
 * Comment     :   
 * *************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections.Generic;
using <%= ProjectNameSpace %>.Common;
using <%= ProjectNameSpace %>.Entity;

 <% 
		string keyType = CSharpAlias[SourceTable.PrimaryKey.MemberColumns[0].SystemType.FullName]; //GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]); 
		string keyName = GetCamelCaseName(SourceTable.PrimaryKey.MemberColumns[0].Name);
        string ClassName = GetClassName(SourceTable,Unchanged); //类名
		%>
namespace <%= ProjectNameSpace %>.DAL
{
    /// <summary>
    /// Data Access Layer class <%= SourceTable %>.
    /// </summary>
    public partial class <%= GetClassName(SourceTable,Unchanged) %>DAL : DalBase<<%= GetClassName(SourceTable,Unchanged) %>Entity>
    {
        #region 构造函数
        
		public <%= GetClassName(SourceTable,Unchanged) %>DAL(): base()
        { }

        public <%= GetClassName(SourceTable,Unchanged) %>DAL(string DbName): base(DbName)
        { }

        public <%= GetClassName(SourceTable,Unchanged) %>DAL(DbTransaction tran): base(tran)
        { }
        
        #endregion
        
        #region public method
        
        public void BulkInsert(List<<%= ClassName %>Entity> list)
        {
            foreach (<%= ClassName %>Entity item in list)
            {
                this.Insert(item);
            }
            /*
            SqlBulkCopy bulkCopy;
            if (System.Transactions.Transaction.Current != null)
            {
                using (System.Transactions.TransactionScope t = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.Suppress))
                {
                    bulkCopy = new SqlBulkCopy(CurrentDatabase.ConnectionString, SqlBulkCopyOptions.CheckConstraints);
                    bulkCopy.BulkCopyTimeout = 360;
                    bulkCopy.DestinationTableName = "<%= SourceTable.Name %>";
                    DataTable dataTable =ConvertToDataTable(list);
                    <%for(int i=0;i< SourceTable.Columns.Count;i++){%>
                    bulkCopy.ColumnMappings.Add("<%= SourceTable.Columns[i].Name%>", "<%= SourceTable.Columns[i].Name%>");
                    <%}%>
                    
                    bulkCopy.WriteToServer(dataTable);
                    t.Complete();
                    bulkCopy.Close();
                }
            }
            else
            {
                bulkCopy = new SqlBulkCopy(CurrentDatabase.ConnectionString, SqlBulkCopyOptions.CheckConstraints);
                bulkCopy.BulkCopyTimeout = 360;
                bulkCopy.DestinationTableName = "<%= SourceTable.Name %>";
                DataTable dataTable =ConvertToDataTable(list);
                <%for(int i=0;i< SourceTable.Columns.Count;i++){%>
                bulkCopy.ColumnMappings.Add("<%= SourceTable.Columns[i].Name%>", "<%= SourceTable.Columns[i].Name%>");
                <%}%>
                
                bulkCopy.WriteToServer(dataTable);
                bulkCopy.Close();
            }
             */
        }
        #endregion
        
        #region help method
        public DataTable ConvertToDataTable(List<<%= GetClassName(SourceTable,Unchanged) %>Entity> list)
        {
            DataTable table = new DataTable("<%= SourceTable.Name %>");
            <%for(int i=0;i< SourceTable.Columns.Count;i++){%>
            table.Columns.Add("<%= SourceTable.Columns[i].Name%>", typeof(<%= SourceTable.Columns[i].SystemType%>));
            <%}%>
            
            if (list != null && list.Count > 0)
            {
                foreach (<%= GetClassName(SourceTable,Unchanged) %>Entity entity in list)
                {
                    table.Rows.Add(
                        <%for(int i=0;i< SourceTable.Columns.Count;i++){%>
                        entity.<%= StringUtil.ToPascalCase(SourceTable.Columns[i].Name) %><%if (i!= (SourceTable.Columns.Count-1)){%>,<%}%>
                        <%}%>
                        );
                }
            }
            return table;
        }
        #endregion
    }
}
<script runat="template">
public string GetCSharpValidType()
{
    switch (SourceTable.PrimaryKey.MemberColumns[0].DataType)
    {
        case DbType.Decimal: return "decimal";
        case DbType.Int16:
        case DbType.Int32:
        case DbType.Int64: return "int";
        case DbType.Guid: return "Guid";
        case DbType.Date:
        case DbType.Time:
        case DbType.DateTime:  return "DateTime";
        case DbType.Boolean:  return "bool";
        default: return "object";
    }
}

public string GetSqlParameterStatement(ColumnSchema column)
{
      string param = "@" + column.Name + " " + column.NativeType;
 
      switch (column.DataType)
      {
            case DbType.Decimal:
            {
                  param += "(" + column.Precision + ", " + column.Scale + ")";
                  break;
            }
            default:
            {
                  if (column.Size > 0)
                  {
                        param += "(" + column.Size + ")";
                  }
                  break;
            }
      }
 
      return param;
}

public string GetCSharpVariableType(ColumnSchema column,string str)
{
    if (column.Name.EndsWith("TypeCode")) return str;
    
    switch (column.DataType)
    {
        case DbType.AnsiString: return str + ".ToString()";
        case DbType.AnsiStringFixedLength: return str + ".ToString()";
        case DbType.Binary: return "((" + str + ") == DBNull.Value) ? Convert.ToByte(0) : Convert.ToByte(" + str + ")";
        case DbType.Boolean: return "((" + str + ") == DBNull.Value) ? false : (bool)" + str;
        case DbType.Byte: return "((" + str + ") == DBNull.Value) ? Convert.ToByte(0) : Convert.ToByte(" + str + ")";
        case DbType.Currency: return "((" + str + ") == DBNull.Value) ? 0 : Convert.ToDecimal(" + str + ")";
        case DbType.Date: return "((" + str + ")==DBNull.Value) ? "+DateTime.Now+" : Convert.ToDateTime(" + str + ")";
        case DbType.DateTime: return "((" + str + ") == DBNull.Value) ? new DateTime(1900, 1, 1) : Convert.ToDateTime(" + str + ")";
        case DbType.Decimal: return "((" + str + ") == DBNull.Value) ? 0 : Convert.ToDecimal(" + str + ")";
        case DbType.Double: return "((" + str + ") == DBNull.Value) ? 0 : Convert.ToDouble(" + str + ")";
        case DbType.Guid: return "((" + str + ") == DBNull.Value) ? Guid.Empty : (Guid)" + str;
        case DbType.Int16: return "(short)" + str;
        case DbType.Int32: return "((" + str + ") == DBNull.Value) ? 0 : Convert.ToInt32(" + str + ")";
        case DbType.Int64: return "(long)" + str;
        case DbType.Object: return "(object)" + str;
        case DbType.SByte: return "Convert.ToSByte(" + str + ")";
        case DbType.Single: return "(float)" + str;
        case DbType.String: return str + ".ToString()";
        case DbType.StringFixedLength: return str + ".ToString()";
        case DbType.Time: return "(DateTime)" + str;
        case DbType.UInt16: return "(ushort)" + str;
        case DbType.UInt32: return "(uint)" + str;
        case DbType.UInt64: return "(ulong)" + str;
        case DbType.VarNumeric: return "Convert.ToDecimal(" + str + ")";
        default:
        {
            return "__UNKNOWN__" + str;
        }
    }
}

public string GetCSharpSqlType(ColumnSchema column)
{
    //Response.Write(column.Name + ": ");
    //Response.WriteLine(column.DataType);
    //if (column.Name.EndsWith("TypeCode")) return "";
    
    switch (column.DataType)
    {
        case DbType.AnsiString: return  ".String";
        case DbType.AnsiStringFixedLength: return  ".String";
        case DbType.Binary: return ".Binary";
        case DbType.Boolean: return ".Boolean" ;
        case DbType.Byte: return ".Byte";
        case DbType.Currency: return ".Decimal";
        case DbType.Date: return "";
        case DbType.DateTime: return ".DateTime";
        case DbType.Decimal: return ".Decimal" ;
        case DbType.Double: return ".Float";
        case DbType.Guid: return ".Guid";
        case DbType.Int16: return ".Int16" ;
        case DbType.Int32: return ".Int32";
        case DbType.Int64: return ".Int64" ;
        case DbType.Object: return "" ;
        case DbType.SByte: return "" ;
        case DbType.Single: return ".Float" ;
        case DbType.String: return  ".String";
        case DbType.StringFixedLength: return ".String";
        //case DbType.m
        case DbType.Time: return ".DateTime" ;
        case DbType.UInt16: return "." ;
        case DbType.UInt32: return "";
        case DbType.UInt64: return "";
        case DbType.VarNumeric: return "" ;
        
        default:
        {
            return "__UNKNOWN__" ;
        }
    }
}
</script>
<script runat="template">

    public int GetColumnPosition(string name)
    {
        int i = 0;
        foreach(ColumnSchema column in SourceTable.Columns)
        {
            if (column.Name == name)
            {
                return i;
            }
            i++;
        }
        return i;
    }

    public string GetMemberVariableDeclarationStatement(ColumnSchema column)
    {
        return GetMemberVariableDeclarationStatement("private", column);
    }

    public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
    {
        string statement = protectionLevel + " ";
        statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);

        string defaultValue = GetMemberVariableDefaultValue(column);
        if (defaultValue != "")
        {
            statement += " = " + defaultValue;
        }

        statement += ";";

        return statement;
    }

    public string GetReaderAssignmentStatement(ColumnSchema column, int index)
    {
        string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
        statement += GetMemberVariableName(column) + " = ";

        if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";

        statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";

        return statement;
    }

    public string GetCamelCaseName(string value)
    {
        return value.Substring(0, 1).ToLower() + value.Substring(1);
    }

    public string ConvertFirstCharToUpper(string value)
    {
        return value.Substring(0, 1).ToUpper() + value.Substring(1);
    }

    public string GetMemberVariableName(ColumnSchema column)
    {
        string propertyName = GetPropertyName(column);
        string memberVariableName = GetCamelCaseName(propertyName);

        return memberVariableName;
    }

    public string GetPropertyName(ColumnSchema column)
    {
        string propertyName = ConvertFirstCharToUpper(column.Name);

        if (propertyName == column.Table.Name + "Name") return "Name";
        if (propertyName == column.Table.Name + "Description") return "Description";

        if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);

        return propertyName;
    }
    
    public string GetMemberVariableDefaultValue(ColumnSchema column)
    {
        switch (column.DataType)
        {
            case DbType.Guid:
            {
                return "Guid.Empty";
            }
            case DbType.AnsiString:
            case DbType.AnsiStringFixedLength:
            case DbType.String:
            case DbType.StringFixedLength:
            {
                return "String.Empty";
            }
            case DbType.Int32:
            {
                return "0";
            }
            default:
            {
                return "";
            }
        }
    }

    public string GetCSharpVariableType(ColumnSchema column)
    {
        if (column.Name.EndsWith("TypeCode")) return column.Name;

        switch (column.DataType)
        {
            case DbType.AnsiString: return "string";
            case DbType.AnsiStringFixedLength: return "string";
            case DbType.Binary: return "byte[]";
            case DbType.Boolean: return "bool";
            case DbType.Byte: return "byte";
            case DbType.Currency: return "decimal";
            case DbType.Date: return "DateTime";
            case DbType.DateTime: return "DateTime";
            case DbType.Decimal: return "decimal";
            case DbType.Double: return "double";
            case DbType.Guid: return "Guid";
            case DbType.Int16: return "short";
            case DbType.Int32: return "int";
            case DbType.Int64: return "long";
            case DbType.Object: return "object";
            case DbType.SByte: return "sbyte";
            case DbType.Single: return "float";
            case DbType.String: return "string";
            case DbType.StringFixedLength: return "string";
            case DbType.Time: return "TimeSpan";
            case DbType.UInt16: return "ushort";
            case DbType.UInt32: return "uint";
            case DbType.UInt64: return "ulong";
            case DbType.VarNumeric: return "decimal";
            default:
            {
                return "__UNKNOWN__" + column.NativeType;
            }
        }
    }

    public string GetReaderMethod(ColumnSchema column)
    {
        switch (column.DataType)
        {
            case DbType.Byte:
            {
                return "GetByte";
            }
            case DbType.Int16:
            {
                return "GetInt16";
            }
            case DbType.Int32:
            {
                return "GetInt32";
            }
            case DbType.Int64:
            {
                return "GetInt64";
            }
            case DbType.AnsiStringFixedLength:
            case DbType.AnsiString:
            case DbType.String:
            case DbType.StringFixedLength:
            {
                return "GetString";
            }
            case DbType.Boolean:
            {
                return "GetBoolean";
            }
            case DbType.Guid:
            {
                return "GetGuid";
            }
            case DbType.Currency:
            case DbType.Decimal:
            {
                return "GetDecimal";
            }
            case DbType.DateTime:
            case DbType.Date:
            {
                return "GetDateTime";
            }
            default:
            {
                return "__SQL__" + column.DataType;
            }
        }
    }

    public string GetClassName(TableSchema table, Boolean unchanged)
    {
        if(table==null)
        {
            return null;
        }
        if(unchanged)
        {
            return table.Name;
        }
        else
        {
            if(table.Name.IndexOf("_") != -1)
            {
                return StringUtil.ToPascalCase(table.Name.Substring(table.Name.IndexOf("_")));
            }
            return StringUtil.ToPascalCase(table.Name);
        }
    }
    
	private string TrimTableName(string tableName)
	{ 
		//return tableName.Replace("_","");
		string[] tmp = tableName.Split('_');
		if (tmp.Length == 0)
			return tableName;
	    return tmp[tmp.Length - 1];
    }

    public string GetSqlDbType(ColumnSchema column)
    {
        switch (column.NativeType)
        {
            case "bigint": return "BigInt";
            case "binary": return "Binary";
            case "bit": return "Bit";
            case "char": return "Char";
            case "datetime": return "DateTime";
            case "decimal": return "Decimal";
            case "float": return "Float";
            case "image": return "Image";
            case "int": return "Int";
            case "money": return "Money";
            case "nchar": return "NChar";
            case "ntext": return "NText";
            case "numeric": return "Decimal";
            case "nvarchar": return "NVarChar";
            case "real": return "Real";
            case "smalldatetime": return "SmallDateTime";
            case "smallint": return "SmallInt";
            case "smallmoney": return "SmallMoney";
            case "sql_variant": return "Variant";
            case "sysname": return "NChar";
            case "text": return "Text";
            case "timestamp": return "Timestamp";
            case "tinyint": return "TinyInt";
            case "uniqueidentifier": return "UniqueIdentifier";
            case "varbinary": return "VarBinary";
            case "varchar": return "VarChar";
            default: return "__UNKNOWN__" + column.NativeType;
        }
    }

    public string GetPrimaryKeyVariableExpression(TableSchema table)
    {
        return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]) + " " + GetCamelCaseName(table.PrimaryKey.MemberColumns[0].Name);
    }

    public string GetPrimaryKeyType(TableSchema table)
    {
        if (table.PrimaryKey.MemberColumns.Count == 1)
        {
            return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
        }
        else
        {
            throw new ApplicationException("This template will not work on primary keys with more than one member column.");
        }
    }

    public string GetPopulationConstructorParams(SchemaExplorer.TableSchema table)
    {
        System.Text.StringBuilder sb = new StringBuilder();
        foreach(ColumnSchema column in table.Columns)
        {
            if (sb.Length != 0)
                sb.Append(", ");

            sb.Append(GetCSharpVariableType(column));
            sb.Append(" ");
            sb.Append(GetCamelCaseName(column.Name));
        }
        return sb.ToString();
    }

    public string GetCollectionClassName()
    {
        return GetClassName(SourceTable,Unchanged) + "Collection";
    } 

    public string GetLowerCaseName(string value)
    {
        return value.ToLower();
    }
    
    public string GetModuleInstanceName(TableSchema table)
    {
		return "_" + TrimTableName(table.Name) + "Info";
    }

    public string GetAddParametersString(ColumnSchema column)
    {
        DbType dbtype = column.DataType;
        string result = String.Empty;
        switch (dbtype)
        {
            case DbType.Byte:
            case DbType.Currency:
            case DbType.Decimal:
            case DbType.Int16:
            case DbType.Int32:
            case DbType.Int64:
            if(column.AllowDBNull)
            {
                result = "if(" + GetModuleInstanceName(column.Table) + "." + column.Name + ".ToString()!=null&&" + GetModuleInstanceName(column.Table) + "." + column.Name + ">0){db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");}";
            }
            else
            {
                result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");";
            }
            break;
            case DbType.AnsiStringFixedLength:
            case DbType.AnsiString:
            case DbType.String:
            case DbType.StringFixedLength:
            case DbType.Binary:
            if(column.AllowDBNull)
            {
                result = "if(" + GetModuleInstanceName(column.Table) + "." + column.Name + "!=null&&" + GetModuleInstanceName(column.Table) + "." + column.Name + ".Length>0){db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + "," + column.Size + ");}";
            }
            else
            {
                result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + "," + column.Size + ");";
            }
            break;
            case DbType.Guid:
            if(column.AllowDBNull)
            {
                result = "if(" + GetModuleInstanceName(column.Table) + "." + column.Name + ".ToString()!=null){db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");}";
            }
            else
            {
                result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");";
            }
            break;
            case DbType.DateTime:
            case DbType.Date:
            if(column.AllowDBNull)
            {
                result = "if(" + GetModuleInstanceName(column.Table) + "." + column.Name + "!=deadDate){db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");}";
            }
            else
            {
                result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");";
            }
            break;
            default:
            result = "db.AddParameter(\"@" + column.Name + "\"," + GetModuleInstanceName(column.Table) + "." + column.Name + ");";
            break;
        } 
        return result;
    }
    
    public string GetPrimaryKeyCSharpType()
    {
        return GetCSharpVariableType(SourceTable.PrimaryKey.MemberColumns[0]);
    }
    
    /// <summary>设置生成文件名, 同时也对应代码输出窗口Title上的文件名
    /// </summary>
    /// <returns></returns>
    public override string GetFileName()
    {
    	return this.GetClassName(this.SourceTable, this.Unchanged) + "DAL.cs";
    }

</script>
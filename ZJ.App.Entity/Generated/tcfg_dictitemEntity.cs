/**************************************************************
 * This file is part of  Project  
 * Copyright (C)2019 Microsoft
 * 
 * Author      : Generated by CodeSmith(Entity_v3.cst)
 * Mail        : 
 * Create Date : 2019/8/29 10:00:05
 * Summary     : this file was auto generated by tool . do not modify
 * 
 * 
 * Modified By : 
 * Date        : 
 * Mail        :
 * Comment     :增加新属性Cloumn,Dispaly 需要和相应的DalBase对应
 * *************************************************************/

using System; 
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using ZJ.App.Common;

namespace ZJ.App.Entity
{
	/// <summary>
	/// 表tcfg_dictitem数据实体
	/// </summary>
	[Serializable]
    [DataContract]
	[TableName("tcfg_dictitem")]
	public partial class tcfg_dictitemEntity : EntityBase
	{ 
		
		#region 构造函数
		///<summary>
		///
		///</summary>
		public tcfg_dictitemEntity():base()
		{
			
		}

        public tcfg_dictitemEntity(bool IsQueryTemplate) : base(IsQueryTemplate)
        {

        }
		 
		#endregion 
		
		#region 公共属性
        #region DictId
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_DictId = "DictId";
        private uint _DictId;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="DictId")]
        [PrimaryKey]
		[Identity]
        public uint DictId
		{
			get{return _DictId;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_DictId, value);
                }
                
                _DictId = value;
            }   
		}
        
	    #endregion

        #region ParentID
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_ParentID = "ParentID";
        private int? _ParentID;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="ParentID")]
        public int? ParentID
		{
			get{return _ParentID;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_ParentID, value);
                }
                
                _ParentID = value;
            }   
		}
        
	    #endregion

        #region TableName
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_TableName = "TableName";
        private string _TableName;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="TableName")]
		[MaxLength(765)]
        public string TableName
		{
			get{return _TableName;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_TableName, value);
                }
                
                _TableName = value;
            }   
		}
        
	    #endregion

        #region FieldName
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_FieldName = "FieldName";
        private string _FieldName;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="FieldName")]
		[MaxLength(765)]
        public string FieldName
		{
			get{return _FieldName;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_FieldName, value);
                }
                
                _FieldName = value;
            }   
		}
        
	    #endregion

        #region PropertyName
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_PropertyName = "PropertyName";
        private string _PropertyName;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="PropertyName")]
		[MaxLength(765)]
        public string PropertyName
		{
			get{return _PropertyName;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_PropertyName, value);
                }
                
                _PropertyName = value;
            }   
		}
        
	    #endregion

        #region PropertyValue
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_PropertyValue = "PropertyValue";
        private int? _PropertyValue;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="PropertyValue")]
        public int? PropertyValue
		{
			get{return _PropertyValue;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_PropertyValue, value);
                }
                
                _PropertyValue = value;
            }   
		}
        
	    #endregion

        #region OrderNumber
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_OrderNumber = "OrderNumber";
        private int? _OrderNumber;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="OrderNumber")]
        public int? OrderNumber
		{
			get{return _OrderNumber;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_OrderNumber, value);
                }
                
                _OrderNumber = value;
            }   
		}
        
	    #endregion

        #region IsDelete
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_IsDelete = "IsDelete";
        private int? _IsDelete;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="IsDelete")]
        public int? IsDelete
		{
			get{return _IsDelete;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_IsDelete, value);
                }
                
                _IsDelete = value;
            }   
		}
        
	    #endregion
		#endregion
	}
}


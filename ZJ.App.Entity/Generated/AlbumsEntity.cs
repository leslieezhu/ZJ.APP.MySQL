/**************************************************************
 * This file is part of  Project  
 * Copyright (C)2017 Microsoft
 * 
 * Author      : Generated by CodeSmith(Entity_v3.cst)
 * Mail        : 
 * Create Date : 2017/7/7 11:10:44
 * Summary     : this file was auto generated by tool . do not modify
 * 
 * 
 * Modified By : 
 * Date        : 
 * Mail        :
 * Comment     :增加新属性Cloumn,Dispaly 需要和相应的DalBase对应
 * *************************************************************/

using System; 
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using ZJ.App.Common;

namespace ZJ.App.Entity
{
	/// <summary>
	/// 表albums数据实体
	/// </summary>
	[Serializable]
    [DataContract]
	[TableName("albums")]
	public partial class AlbumsEntity : EntityBase
	{ 
		
		#region 构造函数
		///<summary>
		///
		///</summary>
		public AlbumsEntity():base()
		{
			
		}

        public AlbumsEntity(bool IsQueryTemplate) : base(IsQueryTemplate)
        {

        }
		 
		#endregion 
		
		#region 公共属性
        #region AlbumId
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_AlbumId = "AlbumId";
        private int _AlbumId;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="AlbumId")]
        [PrimaryKey]
		[Identity]
        public int AlbumId
		{
			get{return _AlbumId;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_AlbumId, value);
                }
                
                _AlbumId = value;
            }   
		}
        
	    #endregion

        #region Title
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_Title = "Title";
        private string _Title;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="Title")]
		[MaxLength(480)]
        public string Title
		{
			get{return _Title;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_Title, value);
                }
                
                _Title = value;
            }   
		}
        
	    #endregion

        #region GenreId
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_GenreId = "GenreId";
        private int? _GenreId;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="GenreId")]
        public int? GenreId
		{
			get{return _GenreId;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_GenreId, value);
                }
                
                _GenreId = value;
            }   
		}
        
	    #endregion

        #region ArtistId
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_ArtistId = "ArtistId";
        private int? _ArtistId;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="ArtistId")]
        public int? ArtistId
		{
			get{return _ArtistId;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_ArtistId, value);
                }
                
                _ArtistId = value;
            }   
		}
        
	    #endregion

        #region Price
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_Price = "Price";
        private decimal? _Price;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="Price")]
        public decimal? Price
		{
			get{return _Price;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_Price, value);
                }
                
                _Price = value;
            }   
		}
        
	    #endregion

        #region AlbumArtUrl
        ///<summary>
        ///
        ///</summary>
        public const string FieldName_AlbumArtUrl = "AlbumArtUrl";
        private string _AlbumArtUrl;
		///<summary>
		///
		///</summary>
        [DataMember]
        [Column(Name="AlbumArtUrl")]
		[MaxLength(480)]
        public string AlbumArtUrl
		{
			get{return _AlbumArtUrl;}
            set
            {
                if (_IsQueryTemplate)
                {
                    this.RegisterQueryCondition(FieldName_AlbumArtUrl, value);
                }
                
                _AlbumArtUrl = value;
            }   
		}
        
	    #endregion
		#endregion
	}
}

